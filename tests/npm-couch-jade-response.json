{
  "seq": 55,
  "id": "jade-express",
  "changes": [
    {
      "rev": "1-15a016b06186e17bcf25ded6bb4ead45"
    }
  ],
  "doc": {
    "_id": "jade-express",
    "_rev": "1-15a016b06186e17bcf25ded6bb4ead45",
    "name": "jade-express",
    "description": "Jade express is a recursive compiler (and middleware), compile all your jade to make it available in cache for fast rendering.",
    "dist-tags": {},
    "versions": {},
    "readme": "# jade-cache \n\n**jade-cache** purpose is help you to deal with jade view into your code, made for ExpressJs I do not know about others.\n\n* `cache` : compile all jade views at startup into templates in one shot and recursive.\n* `middleware` specific route catcher to render these cached templates.\n\n## Why ?\n\nI needed it for emails templating and started by simply compile specific view in code, again and again, but for what ? Why not make it dynamicaly one time for all needed views ?\n\nThen a lot of my \"partials\" view can be rendered without the need to make a specific route. My \"partials\" folder has also some sub folders to make it organized and my code was something like:\n\n```javascript\napp.get('/partials/:type/:name', function (req, res) {\n  var type = req.params.type;\n  var name = req.params.name;\n  res.render('partials/' + type + '/' + name);\n  // calling jade render method then...\n}\n```\n\nWhat can be easily done with a small middleware, I will try explain you later how to use it.\n\nAnd play little bit, see how node core, express, jade are working.\n\n## Install\n\n~~~\nnpm install jade-cache\n~~~\n\n## Usage\n\n### Cache\n\nDone by default, all your views are put in cache at application boot.\n\n```javascript\nvar jcc = require('jcc');\n\napp.configure(function() {\n      app.set('views', __dirname + '/views');\n      app.set('view engine', 'jade');\n      ...\n});\n\nvar options = {};\n\njcc.init(options, app, function() {\n  // all jade are compiled and cached\n});\n\n...\n\n// later in your code when you need template\nreq.app.get('jade-compiled-templates')['/path-to/jade-view']({email:'darul75@gmail.com'});  \n// WHERE\n// 'email' is your view variable\n// 'jade-compiled-templates' is default cache name\n```\nWith debug mode set console output show template `key` to use with cache '/partials/home/example' for instance.\n\n```\n- file .DS_Store' is not a jade file, might not be placed here.\n- file compiled.jade' has been compiled and put in cache (key) for route:'/partials/compiled'\n- file example.jade' has been compiled and put in cache (key) for route:'/partials/home/example'\n- file home.jade' has been compiled and put in cache (key) for route:'/partials/home/home'\n- file home2.jade' has been compiled and put in cache (key) for route:'/partials/home/home2'\n- file subhome.jade' has been compiled and put in cache (key) for route:'/partials/home/subhome/subhome'\n- file notjade.txt' is not a jade file, might not be placed here.\n- file test.jade' has been compiled and put in cache (key) for route:'/partials/test'\n```\n\n### Middleware\n\nKeep it mind this middleware has sense specially for \"partials\" jade views with no jade \"variables\" to be processed in view: #{var}\n\nSee http://jade-lang.com/api/ for more info.\n\nBy default all `/partials/...` route will use this middleware, `/partials/view1.jade', '/partials/folder1/view2'.\n\nBut you can add some route or change it in options.\n\n```javascript\nvar jcc = require('jcc');\n\napp.configure(function() {\n      app.set('views', __dirname + '/views');\n      app.set('view engine', 'jade');\n      app.use(jcc.handle);\n      ...\n});\n\n// NO NEED TO MAKE SPECIFIC ROUTE \n/*\napp.get('/partials/folder1/view1', function (req, res) {\n  var type = req.params.type;\n  var name = req.params.name;\n  res.render('partials/' + type + '/' + name);\n  calling jade render method then...\n}*/\n\nvar options = {};\n\njcc.init(options, app, function() {\n  // all is compiled\n  app.enable('jcc'); // mandatory for middleware to be activated\n});\n...\n\n// later in you code can still use this:\n // 'email' is your view variable\nreq.app.get('jade-compiled-templates')['/path-to/jade-view']({email:'darul75@gmail.com'});\n```\n\n## Options\n\n- `debug` : see trace, useful at startup you will see all your routes path and check for errors compiling views, default `false`.\n- `exclude` : file or directory to exclude from jade compile processing, default `['.svn', '.DS_Store']`.\n- `routes` : routes matching middleware use, keep it mind do not handle jade variables because simply call template with no parameter, default `'/partials'`\n- `cache`: cache name, default `'jade-compiled-templates'`  \n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Julien Val√©ry\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
    "maintainers": [
      {
        "name": "darul75",
        "email": "darul@gmail.com"
      }
    ],
    "time": {
      "modified": "2013-11-13T19:51:48.808Z",
      "created": "2013-11-13T19:51:48.808Z"
    },
    "readmeFilename": ""
  }
}